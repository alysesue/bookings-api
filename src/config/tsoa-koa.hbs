/* tslint:disable */
/* eslint-disable */
// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
{{#if canImportByAlias}}
    import { Controller, ValidationService, FieldErrors, ValidateError, TsoaRoute } from 'tsoa';
{{else}}
    import { Controller, ValidationService, FieldErrors, ValidateError, TsoaRoute } from '../../../src';
{{/if}}
{{#if iocModule}}
    import { iocContainer } from '{{iocModule}}';
{{/if}}
{{#each controllers}}
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    import { {{name}} } from '{{modulePath}}';
{{/each}}
{{#if authenticationModule}}
    import { koaAuthentication } from '{{authenticationModule}}';
{{/if}}
import * as KoaRouter from 'koa-router';
import * as _ from 'lodash';

import { ContainerContextMiddleware } from './infrastructure/containerContext.middleware';

// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

// =============================================================================
// MOL: Explicit typing caused typescript build errors (11th Nov 2019)
const models: any = {
// =============================================================================
{{#each models}}
    "{{@key}}": {
    {{#if enums}}
        "dataType": "refEnum",
        "enums": {{{json enums}}},
    {{/if}}
    {{#if properties}}
        "dataType": "refObject",
        "properties": {
        {{#each properties}}
            "{{@key}}": {{{json this}}},
        {{/each}}
        },
        "additionalProperties": {{{json additionalProperties}}},
    {{/if}}
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
{{/each}}
};
const validationService = new ValidationService(models);

// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

export function RegisterRoutes(router: KoaRouter) {
// ###########################################################################################################
//  NOTE: If you do not see routes for all of your controllers in this file, then you might not have informed tsoa of where to look
//      Please look into the "controllerPathGlobs" config option described in the readme: https://github.com/lukeautry/tsoa
// ###########################################################################################################
{{#each controllers}}
    {{#each actions}}
        router.{{method}}('{{fullPath}}',
        {{#if security.length}}
            authenticateMiddleware({{json security}}),
        {{/if}}
        async (context: any, next: any) => {
        // =============================================================================
        // MOL: Ensuring that each request only triggers 1 route
        if(context.request["_mol_handled"]) {
        return;
        }
        context.request["_mol_handled"] = true;
        // =============================================================================

        const args = {
        {{#each parameters}}
            {{@key}}: {{{json this}}},
        {{/each}}
        };

        // =============================================================================
        // MOL: Removed the try catch here and moved the validation down for our own error handling
        // let validatedArgs: any[] = [];
        // try {
        //   validatedArgs = getValidatedArgs(args, context);
        // } catch (error) {
        //   context.status = error.status;
        //   context.throw(error.status, JSON.stringify({ fields: error.fields }));
        // }
        // =============================================================================

        {{#if ../../iocModule}}
            const controller: any = iocContainer.get<{{../name}}>({{../name}});
            if (typeof controller['setStatus'] === 'function') {
            controller.setStatus(undefined);
            }
        {{else}}
			const containerContext = ContainerContextMiddleware.getContainerContext(context);
            const controller = containerContext.resolve({{../name}});
        {{/if}}

        // =============================================================================
        // MOL: To support disable action
        // @ts-ignore
        const disable = controller.{{name}}.mol_disable;
        let disabled = false;
        if (_.isBoolean(disable)) {
        disabled = disable
        } else if (_.isFunction(disable)) {
        disabled = await disable();
        }

        if (disabled) {
        return;
        }
        // =============================================================================

        // =============================================================================
        // MOL: To support validation skipping
        let skipValidationFields;
        if (controller.{{name}}.prototype && controller.{{name}}.prototype.hasOwnProperty("skipValidation")) {
        skipValidationFields = controller.{{name}}.prototype.skipValidation;
        }
        let validatedArgs: any[] = [];
        validatedArgs = getValidatedArgs(args, context, skipValidationFields);
        // =============================================================================

        // =============================================================================
        // MOL: Injecting Koa context to controller
        (controller as any).context = context;
        // =============================================================================

        const promise = controller.{{name}}.apply(controller, validatedArgs as any);
        return promiseHandler(controller, promise, context, next);
        });
        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    {{/each}}
{{/each}}

{{#if useSecurity}}
    function authenticateMiddleware(security: TsoaRoute.Security[] = []) {
    return async (context: any, next: any) => {
    let responded = 0;
    let success = false;

    const succeed = async (user: any) => {
    if (!success) {
    success = true;
    responded++;
    context.request['user'] = user;
    await next();
    }
    };

    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

    const fail = async (error: any) => {
    responded++;
    if (responded == security.length && !success) {
    // this is an authentication error
    context.status = error.status || 401;
    context.throw(context.status, error.message, error);
    } else if (success) {
    // the authentication was a success but arriving here means the controller
    // probably threw an error that we caught as well
    // so just pass it on
    throw error;
    }
    };

    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

    for (const secMethod of security) {
    if (Object.keys(secMethod).length > 1) {
    let promises: Promise<any>[] = [];

        for (const name in secMethod) {
        promises.push(koaAuthentication(context, name, secMethod[name]));
        }

        return Promise.all(promises)
        .then((users) => succeed(users[0]))
        .catch(fail);
        } else {
        for (const name in secMethod) {
        return koaAuthentication(context, name, secMethod[name])
        .then(succeed)
        .catch(fail);
        }
        }
        }
        }
        }
{{/if}}

    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file:https://github.com/lukeautry/tsoa

    function isController(object: any): object is Controller {
    return 'getHeaders' in object && 'getStatus' in object && 'setStatus' in object;
    }

    function promiseHandler(controllerObj: any, promise: Promise<any>, context: any, next: () => Promise<any>) {
            return Promise.resolve(promise)
            .then((data: any) => {
			if (Boolean(context['_manualContextResponse'])) { return next(); }
			
            if (data || data === false) {		
            context.body = data;
            context.status = 200;
            } else {
            context.status = 204;
            }

            // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

            if (isController(controllerObj)) {
            const headers = controllerObj.getHeaders();
            Object.keys(headers).forEach((name: string) => {
            context.set(name, headers[name]);
            });

            const statusCode = controllerObj.getStatus();
            if (statusCode) {
            context.status = statusCode;
            }
            }
            return next();
            })
            .catch((error: any) => {
            context.status = error.status || 500;
            context.throw(context.status, error.message, error);
            });
            }

            // =============================================================================
            // MOL: To support validation skipping
            function getSkippedObject(obj, skippedFields) {
            let body = obj;
            if (skippedFields) {
            const skipped = {};
            skippedFields.forEach((name) => {
            _.set(skipped, name, _.get(obj, name));
            body = _.omit(body, name);
            });
            return {body, skipped};
            }
            return {body}
            }
            // =============================================================================

            // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
            // =============================================================================
            // MOL: To support validation skipping
            function getValidatedArgs(args: any, context: any, skippedFields?: string[]): any[] {
            // =============================================================================
            const errorFields: FieldErrors = {};
            const values = Object.keys(args).map(key => {
            const name = args[key].name;
            switch (args[key].in) {
            case 'request':
            return context.request;
            case 'query':
            return validationService.ValidateParam(args[key], context.request.query[name], name, errorFields,
            undefined, {{{json minimalSwaggerConfig}}});
            case 'path':
            return validationService.ValidateParam(args[key], context.params[name], name, errorFields,
            undefined, {{{json minimalSwaggerConfig}}});
            case 'header':
            return validationService.ValidateParam(args[key], context.request.headers[name], name, errorFields,
            undefined, {{{json minimalSwaggerConfig}}});
            // =============================================================================
            // MOL: To support validation skipping
            case 'body': {
            const {body, skipped} = getSkippedObject(context.request.body, skippedFields);
            const result = validationService.ValidateParam(args[key], body, name, errorFields, name + '.', {{{json
                    minimalSwaggerConfig}}});
            if (skipped) {
            _.merge(result, skipped);
            }
            return result;
            }
            // =============================================================================
            case 'body-prop':
            return validationService.ValidateParam(args[key], context.request.body[name], name, errorFields,
            'body.', {{{json minimalSwaggerConfig}}});
            }
            });
            if (Object.keys(errorFields).length > 0) {
            throw new ValidateError(errorFields, '');
            }
            return values;
            }

            // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
}

// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
